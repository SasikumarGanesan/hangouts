'use strict';

describe('App', function () {
  var _React$addons$TestUti = React.addons.TestUtils,
      Simulate = _React$addons$TestUti.Simulate,
      renderIntoDocument = _React$addons$TestUti.renderIntoDocument,
      findRenderedDOMComponentWithClass = _React$addons$TestUti.findRenderedDOMComponentWithClass,
      scryRenderedDOMComponentsWithClass = _React$addons$TestUti.scryRenderedDOMComponentsWithClass;


  var app;

  beforeEach(function () {
    app = renderIntoDocument(React.createElement(App, null));
  });

  it('should be a stateful class component', function () {
    expect(React.Component.isPrototypeOf(App)).to.be.true;
  });

  it('should render a single VideoList component', function () {
    var eventList = findRenderedDOMComponentWithClass(app, 'event-list');
    expect(eventList).to.exist;
  });

  it('should update the video player when a video entry\'s title is clicked', function () {

    expect(React.Component.isPrototypeOf(App)).to.be.true;

    var eventEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'event-entry-title');

    eventEntryTitleElements.forEach(function (videoEntryTitle) {
      Simulate.click(videoEntryTitle);
      var player = findRenderedDOMComponentWithClass(app, 'video-player');
      var playerTitle = player.querySelector('.video-player-details h3');

      // This test assumes that if you can successfully update the video player's title,
      // you can also update the video and description
      expect(playerTitle.innerHTML).to.equal(videoEntryTitle.innerHTML);
    });
  });

  it('should load data when app is initialized', function () {

    var EventEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'event-entry-title');

    EventEntryTitleElements.forEach(function (eventEntryTitle, i) {
      return expect(eventEntryTitle.innerHTML).to.equal(fakeEventData[i].snippet.title);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NsaWVudC9zcGVjL2NvbXBvbmVudHMvQXBwU3BlYy5qc3giXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJSZWFjdCIsImFkZG9ucyIsIlRlc3RVdGlscyIsIlNpbXVsYXRlIiwicmVuZGVySW50b0RvY3VtZW50IiwiZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzIiwic2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyIsImFwcCIsImJlZm9yZUVhY2giLCJpdCIsImV4cGVjdCIsIkNvbXBvbmVudCIsImlzUHJvdG90eXBlT2YiLCJBcHAiLCJ0byIsImJlIiwidHJ1ZSIsImV2ZW50TGlzdCIsImV4aXN0IiwiZXZlbnRFbnRyeVRpdGxlRWxlbWVudHMiLCJmb3JFYWNoIiwidmlkZW9FbnRyeVRpdGxlIiwiY2xpY2siLCJwbGF5ZXIiLCJwbGF5ZXJUaXRsZSIsInF1ZXJ5U2VsZWN0b3IiLCJpbm5lckhUTUwiLCJlcXVhbCIsIkV2ZW50RW50cnlUaXRsZUVsZW1lbnRzIiwiZXZlbnRFbnRyeVRpdGxlIiwiaSIsImZha2VFdmVudERhdGEiLCJzbmlwcGV0IiwidGl0bGUiXSwibWFwcGluZ3MiOiI7O0FBQUFBLFNBQVMsS0FBVCxFQUFnQixZQUFXO0FBQUEsOEJBTXJCQyxNQUFNQyxNQUFOLENBQWFDLFNBTlE7QUFBQSxNQUV2QkMsUUFGdUIseUJBRXZCQSxRQUZ1QjtBQUFBLE1BR3ZCQyxrQkFIdUIseUJBR3ZCQSxrQkFIdUI7QUFBQSxNQUl2QkMsaUNBSnVCLHlCQUl2QkEsaUNBSnVCO0FBQUEsTUFLdkJDLGtDQUx1Qix5QkFLdkJBLGtDQUx1Qjs7O0FBUXpCLE1BQUlDLEdBQUo7O0FBRUFDLGFBQVcsWUFBVztBQUNwQkQsVUFBTUgsbUJBQ0osb0JBQUMsR0FBRCxPQURJLENBQU47QUFHRCxHQUpEOztBQU1BSyxLQUFHLHNDQUFILEVBQTJDLFlBQVc7QUFDcERDLFdBQU9WLE1BQU1XLFNBQU4sQ0FBZ0JDLGFBQWhCLENBQThCQyxHQUE5QixDQUFQLEVBQTJDQyxFQUEzQyxDQUE4Q0MsRUFBOUMsQ0FBaURDLElBQWpEO0FBQ0QsR0FGRDs7QUFJQVAsS0FBRyw0Q0FBSCxFQUFpRCxZQUFXO0FBQzFELFFBQUlRLFlBQVlaLGtDQUFrQ0UsR0FBbEMsRUFBdUMsWUFBdkMsQ0FBaEI7QUFDQUcsV0FBT08sU0FBUCxFQUFrQkgsRUFBbEIsQ0FBcUJJLEtBQXJCO0FBQ0QsR0FIRDs7QUFLQVQsS0FBRyx1RUFBSCxFQUE0RSxZQUFXOztBQUVyRkMsV0FBT1YsTUFBTVcsU0FBTixDQUFnQkMsYUFBaEIsQ0FBOEJDLEdBQTlCLENBQVAsRUFBMkNDLEVBQTNDLENBQThDQyxFQUE5QyxDQUFpREMsSUFBakQ7O0FBRUEsUUFBSUcsMEJBQTBCYixtQ0FBbUNDLEdBQW5DLEVBQXdDLG1CQUF4QyxDQUE5Qjs7QUFFQVksNEJBQXdCQyxPQUF4QixDQUFnQyxVQUFDQyxlQUFELEVBQXFCO0FBQ25EbEIsZUFBU21CLEtBQVQsQ0FBZUQsZUFBZjtBQUNBLFVBQUlFLFNBQVNsQixrQ0FBa0NFLEdBQWxDLEVBQXVDLGNBQXZDLENBQWI7QUFDQSxVQUFJaUIsY0FBY0QsT0FBT0UsYUFBUCxDQUFxQiwwQkFBckIsQ0FBbEI7O0FBRUE7QUFDQTtBQUNBZixhQUFPYyxZQUFZRSxTQUFuQixFQUE4QlosRUFBOUIsQ0FBaUNhLEtBQWpDLENBQXVDTixnQkFBZ0JLLFNBQXZEO0FBQ0QsS0FSRDtBQVNELEdBZkQ7O0FBaUJDakIsS0FBRywwQ0FBSCxFQUErQyxZQUFXOztBQUV2RCxRQUFJbUIsMEJBQTBCdEIsbUNBQW1DQyxHQUFuQyxFQUF3QyxtQkFBeEMsQ0FBOUI7O0FBRUFxQiw0QkFBd0JSLE9BQXhCLENBQWdDLFVBQUNTLGVBQUQsRUFBa0JDLENBQWxCO0FBQUEsYUFDOUJwQixPQUFPbUIsZ0JBQWdCSCxTQUF2QixFQUFrQ1osRUFBbEMsQ0FBcUNhLEtBQXJDLENBQTJDSSxjQUFjRCxDQUFkLEVBQWlCRSxPQUFqQixDQUF5QkMsS0FBcEUsQ0FEOEI7QUFBQSxLQUFoQztBQUdELEdBUEY7QUFRRixDQWxERCIsImZpbGUiOiJBcHBTcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVzY3JpYmUoJ0FwcCcsIGZ1bmN0aW9uKCkge1xuICB2YXIge1xuICAgIFNpbXVsYXRlLFxuICAgIHJlbmRlckludG9Eb2N1bWVudCxcbiAgICBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MsXG4gICAgc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzc1xuICB9ID0gUmVhY3QuYWRkb25zLlRlc3RVdGlscztcblxuICB2YXIgYXBwO1xuXG4gIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgYXBwID0gcmVuZGVySW50b0RvY3VtZW50KFxuICAgICAgPEFwcCAvPlxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgYSBzdGF0ZWZ1bCBjbGFzcyBjb21wb25lbnQnLCBmdW5jdGlvbigpIHtcbiAgICBleHBlY3QoUmVhY3QuQ29tcG9uZW50LmlzUHJvdG90eXBlT2YoQXBwKSkudG8uYmUudHJ1ZTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSBzaW5nbGUgVmlkZW9MaXN0IGNvbXBvbmVudCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBldmVudExpc3QgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAnZXZlbnQtbGlzdCcpO1xuICAgIGV4cGVjdChldmVudExpc3QpLnRvLmV4aXN0O1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgdmlkZW8gcGxheWVyIHdoZW4gYSB2aWRlbyBlbnRyeVxcJ3MgdGl0bGUgaXMgY2xpY2tlZCcsIGZ1bmN0aW9uKCkge1xuXG4gICAgZXhwZWN0KFJlYWN0LkNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKEFwcCkpLnRvLmJlLnRydWU7XG5cbiAgICB2YXIgZXZlbnRFbnRyeVRpdGxlRWxlbWVudHMgPSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzKGFwcCwgJ2V2ZW50LWVudHJ5LXRpdGxlJyk7XG5cbiAgICBldmVudEVudHJ5VGl0bGVFbGVtZW50cy5mb3JFYWNoKCh2aWRlb0VudHJ5VGl0bGUpID0+IHtcbiAgICAgIFNpbXVsYXRlLmNsaWNrKHZpZGVvRW50cnlUaXRsZSk7XG4gICAgICB2YXIgcGxheWVyID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKGFwcCwgJ3ZpZGVvLXBsYXllcicpO1xuICAgICAgdmFyIHBsYXllclRpdGxlID0gcGxheWVyLnF1ZXJ5U2VsZWN0b3IoJy52aWRlby1wbGF5ZXItZGV0YWlscyBoMycpO1xuXG4gICAgICAvLyBUaGlzIHRlc3QgYXNzdW1lcyB0aGF0IGlmIHlvdSBjYW4gc3VjY2Vzc2Z1bGx5IHVwZGF0ZSB0aGUgdmlkZW8gcGxheWVyJ3MgdGl0bGUsXG4gICAgICAvLyB5b3UgY2FuIGFsc28gdXBkYXRlIHRoZSB2aWRlbyBhbmQgZGVzY3JpcHRpb25cbiAgICAgIGV4cGVjdChwbGF5ZXJUaXRsZS5pbm5lckhUTUwpLnRvLmVxdWFsKHZpZGVvRW50cnlUaXRsZS5pbm5lckhUTUwpO1xuICAgIH0pO1xuICB9KTtcblxuICAgaXQoJ3Nob3VsZCBsb2FkIGRhdGEgd2hlbiBhcHAgaXMgaW5pdGlhbGl6ZWQnLCBmdW5jdGlvbigpIHtcblxuICAgICAgdmFyIEV2ZW50RW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICdldmVudC1lbnRyeS10aXRsZScpO1xuXG4gICAgICBFdmVudEVudHJ5VGl0bGVFbGVtZW50cy5mb3JFYWNoKChldmVudEVudHJ5VGl0bGUsIGkpID0+XG4gICAgICAgIGV4cGVjdChldmVudEVudHJ5VGl0bGUuaW5uZXJIVE1MKS50by5lcXVhbChmYWtlRXZlbnREYXRhW2ldLnNuaXBwZXQudGl0bGUpXG4gICAgICApO1xuICAgIH0pO1xufSk7Il19