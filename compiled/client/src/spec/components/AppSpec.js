'use strict';

describe('App', function () {
  var _React$addons$TestUti = React.addons.TestUtils,
      Simulate = _React$addons$TestUti.Simulate,
      renderIntoDocument = _React$addons$TestUti.renderIntoDocument,
      findRenderedDOMComponentWithClass = _React$addons$TestUti.findRenderedDOMComponentWithClass,
      scryRenderedDOMComponentsWithClass = _React$addons$TestUti.scryRenderedDOMComponentsWithClass;


  var app;

  beforeEach(function () {
    app = renderIntoDocument(React.createElement(App, null));
  });

  it('should be a stateful class component', function () {
    expect(React.Component.isPrototypeOf(App)).to.be.true;
  });

  it('should render a single VideoList component', function () {
    var eventList = findRenderedDOMComponentWithClass(app, 'event-list');
    expect(eventList).to.exist;
  });

  it('should update the video player when a video entry\'s title is clicked', function () {

    expect(React.Component.isPrototypeOf(App)).to.be.true;

    var eventEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'event-entry-title');

    eventEntryTitleElements.forEach(function (videoEntryTitle) {
      Simulate.click(videoEntryTitle);
      var player = findRenderedDOMComponentWithClass(app, 'video-player');
      var playerTitle = player.querySelector('.video-player-details h3');

      // This test assumes that if you can successfully update the video player's title,
      // you can also update the video and description
      expect(playerTitle.innerHTML).to.equal(videoEntryTitle.innerHTML);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NsaWVudC9zcmMvc3BlYy9jb21wb25lbnRzL0FwcFNwZWMuanN4Il0sIm5hbWVzIjpbImRlc2NyaWJlIiwiUmVhY3QiLCJhZGRvbnMiLCJUZXN0VXRpbHMiLCJTaW11bGF0ZSIsInJlbmRlckludG9Eb2N1bWVudCIsImZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyIsInNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3MiLCJhcHAiLCJiZWZvcmVFYWNoIiwiaXQiLCJleHBlY3QiLCJDb21wb25lbnQiLCJpc1Byb3RvdHlwZU9mIiwiQXBwIiwidG8iLCJiZSIsInRydWUiLCJldmVudExpc3QiLCJleGlzdCIsImV2ZW50RW50cnlUaXRsZUVsZW1lbnRzIiwiZm9yRWFjaCIsInZpZGVvRW50cnlUaXRsZSIsImNsaWNrIiwicGxheWVyIiwicGxheWVyVGl0bGUiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiZXF1YWwiXSwibWFwcGluZ3MiOiI7O0FBQUFBLFNBQVMsS0FBVCxFQUFnQixZQUFXO0FBQUEsOEJBTXJCQyxNQUFNQyxNQUFOLENBQWFDLFNBTlE7QUFBQSxNQUV2QkMsUUFGdUIseUJBRXZCQSxRQUZ1QjtBQUFBLE1BR3ZCQyxrQkFIdUIseUJBR3ZCQSxrQkFIdUI7QUFBQSxNQUl2QkMsaUNBSnVCLHlCQUl2QkEsaUNBSnVCO0FBQUEsTUFLdkJDLGtDQUx1Qix5QkFLdkJBLGtDQUx1Qjs7O0FBUXpCLE1BQUlDLEdBQUo7O0FBRUFDLGFBQVcsWUFBVztBQUNwQkQsVUFBTUgsbUJBQ0osb0JBQUMsR0FBRCxPQURJLENBQU47QUFHRCxHQUpEOztBQU1BSyxLQUFHLHNDQUFILEVBQTJDLFlBQVc7QUFDcERDLFdBQU9WLE1BQU1XLFNBQU4sQ0FBZ0JDLGFBQWhCLENBQThCQyxHQUE5QixDQUFQLEVBQTJDQyxFQUEzQyxDQUE4Q0MsRUFBOUMsQ0FBaURDLElBQWpEO0FBQ0QsR0FGRDs7QUFJQVAsS0FBRyw0Q0FBSCxFQUFpRCxZQUFXO0FBQzFELFFBQUlRLFlBQVlaLGtDQUFrQ0UsR0FBbEMsRUFBdUMsWUFBdkMsQ0FBaEI7QUFDQUcsV0FBT08sU0FBUCxFQUFrQkgsRUFBbEIsQ0FBcUJJLEtBQXJCO0FBQ0QsR0FIRDs7QUFLQVQsS0FBRyx1RUFBSCxFQUE0RSxZQUFXOztBQUVyRkMsV0FBT1YsTUFBTVcsU0FBTixDQUFnQkMsYUFBaEIsQ0FBOEJDLEdBQTlCLENBQVAsRUFBMkNDLEVBQTNDLENBQThDQyxFQUE5QyxDQUFpREMsSUFBakQ7O0FBRUEsUUFBSUcsMEJBQTBCYixtQ0FBbUNDLEdBQW5DLEVBQXdDLG1CQUF4QyxDQUE5Qjs7QUFFQVksNEJBQXdCQyxPQUF4QixDQUFnQyxVQUFDQyxlQUFELEVBQXFCO0FBQ25EbEIsZUFBU21CLEtBQVQsQ0FBZUQsZUFBZjtBQUNBLFVBQUlFLFNBQVNsQixrQ0FBa0NFLEdBQWxDLEVBQXVDLGNBQXZDLENBQWI7QUFDQSxVQUFJaUIsY0FBY0QsT0FBT0UsYUFBUCxDQUFxQiwwQkFBckIsQ0FBbEI7O0FBRUE7QUFDQTtBQUNBZixhQUFPYyxZQUFZRSxTQUFuQixFQUE4QlosRUFBOUIsQ0FBaUNhLEtBQWpDLENBQXVDTixnQkFBZ0JLLFNBQXZEO0FBQ0QsS0FSRDtBQVNELEdBZkQ7QUFnQkQsQ0F6Q0QiLCJmaWxlIjoiQXBwU3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlc2NyaWJlKCdBcHAnLCBmdW5jdGlvbigpIHtcbiAgdmFyIHtcbiAgICBTaW11bGF0ZSxcbiAgICByZW5kZXJJbnRvRG9jdW1lbnQsXG4gICAgZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzLFxuICAgIHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3NcbiAgfSA9IFJlYWN0LmFkZG9ucy5UZXN0VXRpbHM7XG5cbiAgdmFyIGFwcDtcblxuICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgIGFwcCA9IHJlbmRlckludG9Eb2N1bWVudChcbiAgICAgIDxBcHAgLz5cbiAgICApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGEgc3RhdGVmdWwgY2xhc3MgY29tcG9uZW50JywgZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0KFJlYWN0LkNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKEFwcCkpLnRvLmJlLnRydWU7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGEgc2luZ2xlIFZpZGVvTGlzdCBjb21wb25lbnQnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgZXZlbnRMaXN0ID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKGFwcCwgJ2V2ZW50LWxpc3QnKTtcbiAgICBleHBlY3QoZXZlbnRMaXN0KS50by5leGlzdDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB1cGRhdGUgdGhlIHZpZGVvIHBsYXllciB3aGVuIGEgdmlkZW8gZW50cnlcXCdzIHRpdGxlIGlzIGNsaWNrZWQnLCBmdW5jdGlvbigpIHtcblxuICAgIGV4cGVjdChSZWFjdC5Db21wb25lbnQuaXNQcm90b3R5cGVPZihBcHApKS50by5iZS50cnVlO1xuXG4gICAgdmFyIGV2ZW50RW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICdldmVudC1lbnRyeS10aXRsZScpO1xuXG4gICAgZXZlbnRFbnRyeVRpdGxlRWxlbWVudHMuZm9yRWFjaCgodmlkZW9FbnRyeVRpdGxlKSA9PiB7XG4gICAgICBTaW11bGF0ZS5jbGljayh2aWRlb0VudHJ5VGl0bGUpO1xuICAgICAgdmFyIHBsYXllciA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhhcHAsICd2aWRlby1wbGF5ZXInKTtcbiAgICAgIHZhciBwbGF5ZXJUaXRsZSA9IHBsYXllci5xdWVyeVNlbGVjdG9yKCcudmlkZW8tcGxheWVyLWRldGFpbHMgaDMnKTtcblxuICAgICAgLy8gVGhpcyB0ZXN0IGFzc3VtZXMgdGhhdCBpZiB5b3UgY2FuIHN1Y2Nlc3NmdWxseSB1cGRhdGUgdGhlIHZpZGVvIHBsYXllcidzIHRpdGxlLFxuICAgICAgLy8geW91IGNhbiBhbHNvIHVwZGF0ZSB0aGUgdmlkZW8gYW5kIGRlc2NyaXB0aW9uXG4gICAgICBleHBlY3QocGxheWVyVGl0bGUuaW5uZXJIVE1MKS50by5lcXVhbCh2aWRlb0VudHJ5VGl0bGUuaW5uZXJIVE1MKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXX0=